/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DAOFactory {
  export type OrganisationStruct = {
    organisationFee: BigNumberish;
    walletAddress: string;
    centralTreasury: string;
    contractsDeployed: string[];
  };

  export type OrganisationStructOutput = [
    BigNumber,
    string,
    string,
    string[]
  ] & {
    organisationFee: BigNumber;
    walletAddress: string;
    centralTreasury: string;
    contractsDeployed: string[];
  };
}

export interface DAOFactoryInterface extends utils.Interface {
  contractName: "DAOFactory";
  functions: {
    "SCALE()": FunctionFragment;
    "addTreasuryModule(uint256,address,address,address,address)": FunctionFragment;
    "createOrganization((uint256,address,address,address[]))": FunctionFragment;
    "getDeployedContracts(uint256)": FunctionFragment;
    "getOrgaisationWalletAddess(uint256)": FunctionFragment;
    "getOrganisationFee(uint256)": FunctionFragment;
    "getProtocolFee()": FunctionFragment;
    "getProtocolWalletAddress()": FunctionFragment;
    "getTokenRewardsCalculationAddress()": FunctionFragment;
    "getTreasuryAddress(uint256)": FunctionFragment;
    "organisation(uint256)": FunctionFragment;
    "organisationCount()": FunctionFragment;
    "organisationFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "protocolWalletAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
    "setProtocolWalletAddress(address)": FunctionFragment;
    "setTokenRewardsCalculationAddress(address)": FunctionFragment;
    "tokenRewardsModuleAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryExist(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "SCALE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addTreasuryModule",
    values: [BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrganization",
    values: [DAOFactory.OrganisationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrgaisationWalletAddess",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganisationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRewardsCalculationAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "organisation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "organisationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "organisationFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRewardsCalculationAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRewardsModuleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryExist",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "SCALE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTreasuryModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrgaisationWalletAddess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganisationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRewardsCalculationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organisation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organisationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organisationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRewardsCalculationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRewardsModuleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryExist",
    data: BytesLike
  ): Result;

  events: {
    "NewModuleAdded(uint256)": EventFragment;
    "OrganizationCreated(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TreasuryModuleAdded(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrganizationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryModuleAdded"): EventFragment;
}

export type NewModuleAddedEvent = TypedEvent<
  [BigNumber],
  { organisationID: BigNumber }
>;

export type NewModuleAddedEventFilter = TypedEventFilter<NewModuleAddedEvent>;

export type OrganizationCreatedEvent = TypedEvent<
  [BigNumber, string],
  { id: BigNumber; walletAddress: string }
>;

export type OrganizationCreatedEventFilter =
  TypedEventFilter<OrganizationCreatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TreasuryModuleAddedEvent = TypedEvent<
  [BigNumber],
  { organisationID: BigNumber }
>;

export type TreasuryModuleAddedEventFilter =
  TypedEventFilter<TreasuryModuleAddedEvent>;

export interface DAOFactory extends BaseContract {
  contractName: "DAOFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addTreasuryModule(
      organisationID: BigNumberish,
      USDC: string,
      aUSDC: string,
      aaveIncentivesController: string,
      lendingPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOrganization(
      _organisation: DAOFactory.OrganisationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDeployedContracts(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getOrgaisationWalletAddess(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOrganisationFee(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProtocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProtocolWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    getTokenRewardsCalculationAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTreasuryAddress(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    organisation(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        organisationFee: BigNumber;
        walletAddress: string;
        centralTreasury: string;
      }
    >;

    organisationCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    organisationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolWalletAddress(
      _protocolWalletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenRewardsCalculationAddress(
      _tokenRewardsModuleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenRewardsModuleAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryExist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  addTreasuryModule(
    organisationID: BigNumberish,
    USDC: string,
    aUSDC: string,
    aaveIncentivesController: string,
    lendingPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOrganization(
    _organisation: DAOFactory.OrganisationStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDeployedContracts(
    organisationID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getOrgaisationWalletAddess(
    organisationID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getOrganisationFee(
    organisationID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  getProtocolWalletAddress(overrides?: CallOverrides): Promise<string>;

  getTokenRewardsCalculationAddress(overrides?: CallOverrides): Promise<string>;

  getTreasuryAddress(
    organisationID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  organisation(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      organisationFee: BigNumber;
      walletAddress: string;
      centralTreasury: string;
    }
  >;

  organisationCount(overrides?: CallOverrides): Promise<BigNumber>;

  organisationFee(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  protocolWalletAddress(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolWalletAddress(
    _protocolWalletAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenRewardsCalculationAddress(
    _tokenRewardsModuleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenRewardsModuleAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryExist(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    addTreasuryModule(
      organisationID: BigNumberish,
      USDC: string,
      aUSDC: string,
      aaveIncentivesController: string,
      lendingPool: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createOrganization(
      _organisation: DAOFactory.OrganisationStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployedContracts(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getOrgaisationWalletAddess(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getOrganisationFee(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolWalletAddress(overrides?: CallOverrides): Promise<string>;

    getTokenRewardsCalculationAddress(
      overrides?: CallOverrides
    ): Promise<string>;

    getTreasuryAddress(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    organisation(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        organisationFee: BigNumber;
        walletAddress: string;
        centralTreasury: string;
      }
    >;

    organisationCount(overrides?: CallOverrides): Promise<BigNumber>;

    organisationFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolWalletAddress(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setProtocolWalletAddress(
      _protocolWalletAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setTokenRewardsCalculationAddress(
      _tokenRewardsModuleAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenRewardsModuleAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryExist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewModuleAdded(uint256)"(organisationID?: null): NewModuleAddedEventFilter;
    NewModuleAdded(organisationID?: null): NewModuleAddedEventFilter;

    "OrganizationCreated(uint256,address)"(
      id?: null,
      walletAddress?: null
    ): OrganizationCreatedEventFilter;
    OrganizationCreated(
      id?: null,
      walletAddress?: null
    ): OrganizationCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TreasuryModuleAdded(uint256)"(
      organisationID?: null
    ): TreasuryModuleAddedEventFilter;
    TreasuryModuleAdded(organisationID?: null): TreasuryModuleAddedEventFilter;
  };

  estimateGas: {
    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    addTreasuryModule(
      organisationID: BigNumberish,
      USDC: string,
      aUSDC: string,
      aaveIncentivesController: string,
      lendingPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOrganization(
      _organisation: DAOFactory.OrganisationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDeployedContracts(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrgaisationWalletAddess(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrganisationFee(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenRewardsCalculationAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasuryAddress(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    organisation(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    organisationCount(overrides?: CallOverrides): Promise<BigNumber>;

    organisationFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolWalletAddress(
      _protocolWalletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenRewardsCalculationAddress(
      _tokenRewardsModuleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenRewardsModuleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryExist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTreasuryModule(
      organisationID: BigNumberish,
      USDC: string,
      aUSDC: string,
      aaveIncentivesController: string,
      lendingPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOrganization(
      _organisation: DAOFactory.OrganisationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDeployedContracts(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrgaisationWalletAddess(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrganisationFee(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolWalletAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenRewardsCalculationAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasuryAddress(
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    organisation(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    organisationCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    organisationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolWalletAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolWalletAddress(
      _protocolWalletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenRewardsCalculationAddress(
      _tokenRewardsModuleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenRewardsModuleAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryExist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
