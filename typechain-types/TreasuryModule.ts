/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TreasuryModuleInterface extends utils.Interface {
  contractName: "TreasuryModule";
  functions: {
    "AaveIncentivesController()": FunctionFragment;
    "AaveLendingPool()": FunctionFragment;
    "USDC()": FunctionFragment;
    "USDCAddress()": FunctionFragment;
    "aaveLendingPoolAddress()": FunctionFragment;
    "amUSDC()": FunctionFragment;
    "approveRaffleContract(address)": FunctionFragment;
    "claimAaveRewards(address[],uint256)": FunctionFragment;
    "depositToAave(uint256)": FunctionFragment;
    "getTotalDonationsPerRaffle(address,uint256)": FunctionFragment;
    "getUSDCFromTreasury()": FunctionFragment;
    "getUSDCInAave()": FunctionFragment;
    "organisationFeeBalance()": FunctionFragment;
    "owner()": FunctionFragment;
    "processDonationFromRaffle(uint256,uint256,uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFromAave(uint256)": FunctionFragment;
    "withdrawFundsToOrganisationWallet(uint256,uint256)": FunctionFragment;
    "wrapperContract()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AaveIncentivesController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AaveLendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "USDCAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aaveLendingPoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "amUSDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveRaffleContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAaveRewards",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToAave",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDonationsPerRaffle",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDCFromTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDCInAave",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "organisationFeeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processDonationFromRaffle",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromAave",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFundsToOrganisationWallet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapperContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "AaveIncentivesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AaveLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "USDCAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aaveLendingPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "amUSDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveRaffleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAaveRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToAave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDonationsPerRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDCFromTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDCInAave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organisationFeeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processDonationFromRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromAave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFundsToOrganisationWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapperContract",
    data: BytesLike
  ): Result;

  events: {
    "DonationReceivedFromRaffle(uint256,uint256,address)": EventFragment;
    "FundsDepositedToAave(uint256)": EventFragment;
    "FundsWithdrawnFromAave(uint256)": EventFragment;
    "FundsWithdrawnToOrganisationWallet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProtocolFeesPaidOnDonation(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DonationReceivedFromRaffle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsDepositedToAave"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawnFromAave"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FundsWithdrawnToOrganisationWallet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeesPaidOnDonation"): EventFragment;
}

export type DonationReceivedFromRaffleEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { raffleID: BigNumber; amount: BigNumber; raffleContract: string }
>;

export type DonationReceivedFromRaffleEventFilter =
  TypedEventFilter<DonationReceivedFromRaffleEvent>;

export type FundsDepositedToAaveEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type FundsDepositedToAaveEventFilter =
  TypedEventFilter<FundsDepositedToAaveEvent>;

export type FundsWithdrawnFromAaveEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type FundsWithdrawnFromAaveEventFilter =
  TypedEventFilter<FundsWithdrawnFromAaveEvent>;

export type FundsWithdrawnToOrganisationWalletEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type FundsWithdrawnToOrganisationWalletEventFilter =
  TypedEventFilter<FundsWithdrawnToOrganisationWalletEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ProtocolFeesPaidOnDonationEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type ProtocolFeesPaidOnDonationEventFilter =
  TypedEventFilter<ProtocolFeesPaidOnDonationEvent>;

export interface TreasuryModule extends BaseContract {
  contractName: "TreasuryModule";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TreasuryModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AaveIncentivesController(overrides?: CallOverrides): Promise<[string]>;

    AaveLendingPool(overrides?: CallOverrides): Promise<[string]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    USDCAddress(overrides?: CallOverrides): Promise<[string]>;

    aaveLendingPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    amUSDC(overrides?: CallOverrides): Promise<[string]>;

    approveRaffleContract(
      raffleContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAaveRewards(
      _assets: string[],
      _amountToClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositToAave(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotalDonationsPerRaffle(
      raffleContractAddress: string,
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUSDCFromTreasury(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUSDCInAave(overrides?: CallOverrides): Promise<[BigNumber]>;

    organisationFeeBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processDonationFromRaffle(
      raffleID: BigNumberish,
      amount: BigNumberish,
      organisationID: BigNumberish,
      raffleContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromAave(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFundsToOrganisationWallet(
      amount: BigNumberish,
      organisationID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapperContract(overrides?: CallOverrides): Promise<[string]>;
  };

  AaveIncentivesController(overrides?: CallOverrides): Promise<string>;

  AaveLendingPool(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  USDCAddress(overrides?: CallOverrides): Promise<string>;

  aaveLendingPoolAddress(overrides?: CallOverrides): Promise<string>;

  amUSDC(overrides?: CallOverrides): Promise<string>;

  approveRaffleContract(
    raffleContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAaveRewards(
    _assets: string[],
    _amountToClaim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositToAave(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTotalDonationsPerRaffle(
    raffleContractAddress: string,
    raffleID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUSDCFromTreasury(overrides?: CallOverrides): Promise<BigNumber>;

  getUSDCInAave(overrides?: CallOverrides): Promise<BigNumber>;

  organisationFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  processDonationFromRaffle(
    raffleID: BigNumberish,
    amount: BigNumberish,
    organisationID: BigNumberish,
    raffleContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromAave(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFundsToOrganisationWallet(
    amount: BigNumberish,
    organisationID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapperContract(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    AaveIncentivesController(overrides?: CallOverrides): Promise<string>;

    AaveLendingPool(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    USDCAddress(overrides?: CallOverrides): Promise<string>;

    aaveLendingPoolAddress(overrides?: CallOverrides): Promise<string>;

    amUSDC(overrides?: CallOverrides): Promise<string>;

    approveRaffleContract(
      raffleContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAaveRewards(
      _assets: string[],
      _amountToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToAave(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getTotalDonationsPerRaffle(
      raffleContractAddress: string,
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUSDCFromTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDCInAave(overrides?: CallOverrides): Promise<BigNumber>;

    organisationFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    processDonationFromRaffle(
      raffleID: BigNumberish,
      amount: BigNumberish,
      organisationID: BigNumberish,
      raffleContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromAave(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFundsToOrganisationWallet(
      amount: BigNumberish,
      organisationID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapperContract(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DonationReceivedFromRaffle(uint256,uint256,address)"(
      raffleID?: null,
      amount?: null,
      raffleContract?: null
    ): DonationReceivedFromRaffleEventFilter;
    DonationReceivedFromRaffle(
      raffleID?: null,
      amount?: null,
      raffleContract?: null
    ): DonationReceivedFromRaffleEventFilter;

    "FundsDepositedToAave(uint256)"(
      amount?: null
    ): FundsDepositedToAaveEventFilter;
    FundsDepositedToAave(amount?: null): FundsDepositedToAaveEventFilter;

    "FundsWithdrawnFromAave(uint256)"(
      amount?: null
    ): FundsWithdrawnFromAaveEventFilter;
    FundsWithdrawnFromAave(amount?: null): FundsWithdrawnFromAaveEventFilter;

    "FundsWithdrawnToOrganisationWallet(uint256)"(
      amount?: null
    ): FundsWithdrawnToOrganisationWalletEventFilter;
    FundsWithdrawnToOrganisationWallet(
      amount?: null
    ): FundsWithdrawnToOrganisationWalletEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProtocolFeesPaidOnDonation(uint256)"(
      amount?: null
    ): ProtocolFeesPaidOnDonationEventFilter;
    ProtocolFeesPaidOnDonation(
      amount?: null
    ): ProtocolFeesPaidOnDonationEventFilter;
  };

  estimateGas: {
    AaveIncentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    AaveLendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    USDCAddress(overrides?: CallOverrides): Promise<BigNumber>;

    aaveLendingPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    amUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    approveRaffleContract(
      raffleContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAaveRewards(
      _assets: string[],
      _amountToClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositToAave(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTotalDonationsPerRaffle(
      raffleContractAddress: string,
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUSDCFromTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDCInAave(overrides?: CallOverrides): Promise<BigNumber>;

    organisationFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processDonationFromRaffle(
      raffleID: BigNumberish,
      amount: BigNumberish,
      organisationID: BigNumberish,
      raffleContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromAave(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFundsToOrganisationWallet(
      amount: BigNumberish,
      organisationID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapperContract(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AaveIncentivesController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AaveLendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDCAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aaveLendingPoolAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amUSDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveRaffleContract(
      raffleContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAaveRewards(
      _assets: string[],
      _amountToClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositToAave(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTotalDonationsPerRaffle(
      raffleContractAddress: string,
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUSDCFromTreasury(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUSDCInAave(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    organisationFeeBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processDonationFromRaffle(
      raffleID: BigNumberish,
      amount: BigNumberish,
      organisationID: BigNumberish,
      raffleContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromAave(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFundsToOrganisationWallet(
      amount: BigNumberish,
      organisationID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapperContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
